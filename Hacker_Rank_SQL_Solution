
i.	Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
	SELECT * from (select DISTINCT city, LENGTH(city) FROM station ORDER BY      LENGTH(city) ASC, city ASC) WHERE ROWNUM = 1
        UNION
SELECT  * from (select DISTINCT city, LENGTH(city) FROM station ORDER BY    LENGTH(city) DESC, city ASC) WHERE ROWNUM =1;

ii.	Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
	SELECT DISTINCT city FROM station WHERE city LIKE '%a' OR city LIKE '%e' OR city LIKE '%o' OR city LIKE '%u' OR city LIKE '%i';

iii.	Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
	select DISTINCT city from (SELECT DISTINCT city from station WHERE city LIKE 'A%' OR city LIKE 'I%' OR city LIKE 'E%' OR city LIKE 'O%' OR city LIKE 'U%') WHERE city LIKE '%a' OR city LIKE '%i' OR city LIKE '%e' OR city LIKE '%o' OR city LIKE '%u';


iv.	Query the list of CITY names from STATION that does not start with vowels. Your result cannot contain duplicates.
	select DISTINCT CITY FROM station WHERE NOT (city LIKE 'A%' OR city LIKE 'I%' OR city LIKE 'E%' OR city LIKE 'O%' OR city LIKE 'U%');


v.	Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
	select DISTINCT CITY from station WHERE NOT (city LIKE '%a' OR city LIKE '%e' OR city LIKE '%o' OR city LIKE '%i' OR city LIKE '%u');

vi.	Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
	select DISTINCT city from station WHERE
 (NOT (city LIKE 'A%' OR city LIKE 'E%' OR city LIKE 'O%' OR city LIKE 'U%' OR city LIKE 'I%')
OR NOT(city LIKE '%a' OR city LIKE '%e' OR city LIKE '%o' OR city LIKE '%u' OR city LIKE '%i'));

vii.	Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
	select name FROM students WHERE marks > 75 ORDER BY SUBSTR(name, LENGTH(name)-2, 3), id;

viii.	Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
	 select name from employee ORDER BY name;

ix.	Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.
	select name from employee WHERE salary > 2000 AND months < 10 ORDER BY employee_id;

